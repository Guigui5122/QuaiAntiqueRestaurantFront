# Projet Restaurant "Quai Antique"


#Param√©trage du projet QuaiAntique 
    1. Param√©trage projet et environnement
	1. Le dossier projet "QuaiAntiqueRestaurant" est cr√©√© dans : c:/Wamp64/www/ 
	2. Dans VSCODE : cr√©ation des pages principales (index.html / home.html/ 404.html)

#Installation des routes via JS (node_modules) & Git/GitHub
	3. Ajout de la Navigation via JS, en cr√©ant les pages : Route.js / router.js / allRoutes.js
	4. Mise en place du Repository GIT / GITHUB (+ tests)
	5. Configuration des fichiers .htaccess / httpd-vhosts.conf / hosts
	6. Tests de la navigation et du repository

#Installation de Boostrap et SAAS (et plug-in Live SASS Compiler)
	7. Ajout de Bootstrap & bootstrap icons (via "*npm install bootstrap / npm i bootstrap-icons*" √† la racine du projet)
		> ajout des liens "link href bootstrap" dans le header
    8. T√©l√©chargement de l'extension VS = Live Sass Compiler
	    qui permet de compiler le fichier scss en css (via le bouton en bas de page : Watching)
    9. Cr√©er un dossier SCSS :
	Dans ce dossier seront cr√©√©s automatiquement, d√®s la 1ere compilation SCSS to CSS ces 3  fichiers : main.css / main.scss.map / main.scss
	
	**On peut cr√©er du style dans le fichier MAIN.SCSS**
    10. Lier le fichier √† la page index : <link rel="stylesheet" href ="scss/main.css"/>
    11. Cr√©ation d'un fichier "_custom.scss"
	    !! Le underscore ""  devant le fichier permet de d√©finir que ce fichier ne sera pas compil√©
    12. Modification des couleurs primaires BOOTSTRAP :
	    Red√©finir les changement de couleur dans le fichier _custom.scss :
	==(par exemple ):==
	==$primary: #906427;==
	==$secondary : #B6AC97;==
	==$dark : #392C1E;==
	==$black : #292222;==
	    Elles seront prises en compte dans les param√®tres Boostrap!
        
        IDEM pour les FONTS qui peuvent √™tre d√©finit dans "_custom"

#INDEX (index.html)
Cette page sert de base au projet et permet de maintenir une barre nav et un footer
identique sur toutes les pages, et en y ins√©rant le contenu dans le bloc <main-page>

# Cr√©ation des √©l√©ments HEADER / FOOTER / NAV dans INDEX.HTML ou sera inject√© le contenu via le router.js
#HEADER

    - utilisation de la navbar bootstrap (r√©cup√©ration du code s/ le site Boostrap)
    - modification de la couleur du background ("navbar-dark bg-dark") et 
    du margin ME (Margin End) en MS (Margin Start) pour d√©caler les √©l√©ments du menu √† droite : "navbar-nav ms-auto mb-2 mb-lg-0"

#FOOTER 

Cr√©ation de 3 blocs (nos horaires / adresse / mail) en Boostrap Grid
avec du responsive lorsque l'on bascule sur un √©cran plus petit
les √©l√©ment seront de : Horaire en col-12 / Adresse en col-6 / Mail en col-6
et sinon pour du desktop en col-4 (soit 1/3 de l'√©cran ou 3 colonnes de 4 de large ou 33.33%)
[exemple :  <div class="col-6 col-lg-4">]

#FONTS
Les Fonts du projet √©tant d√©finit dans "_custom.scss" dans la variable $font-family-serif et $font-family-sans-serif
je peux les appeler dans le CSS (main.scss) afin de d√©finir des r√®gles pour les paragraphes,
par exemple : 
p{
    font-family: $font-family-serif;
}

#BIGTITLE

Cr√©ation du BigTitle
ajout de l'image dans le css avec background-image, reglage de la position, de la hauteur, et du filtre :
//cr√©ation du CSS Bigtitle (voir bloc css ci-dessous)
.hero-scene{
    position: relative;
    &::before{
        content:"";
        position: absolute; //positionne l'√©l√©ment en avant de l'√©l√©ment parent qui doit √™tre en "position: relative;"
        top:0;
        left:0;
        width: 100%;
        height:100%;
        background-image: url(../images/pork.jpg);
        background-size: cover;
        filter: brightness(0.3);
    }
    //positionne les √©l√©ments devant le ::before 
    *{
        position:relative;
    }
    //r√©glage de la hauteur du bloc et mise en display flex du contenu afin d'avoir les √©l√©ments centr√©s, en colonnes au centre du BigTitle! 
    .hero-scene-content{
        height:300px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }
}

#HOMEPAGE contenu

il y aura 3 blocs : Bienvenue au Quai Antique / Des produits frais / R√©servation en ligne
dans chaque bloc, il y aura un titre, une image, un paragraphe et un bouton, soit sur un fond fonc√© ou clair, alternativement 



#GALERIE (galerie.html)

‚ö†Ô∏è A CHAQUE AJOUT DE PAGE, il faut d√©finir le chemin dans AllRoutes.js :
new Route("/galerie", "La galerie", "pages/galerie.html"), et ajouter le lien dans le code <a href:"/galerie">

1- Cr√©ation de la page Galerie avec le m√™me bigtitle, modifier en enlevant le texte et le bouton.
2- Cr√©ation de la <section> qui condiendra les images, en utilisant Bootstrap Grid :

//Dans le code ci-dessous la class "row" cr√©√©e une ligne "row-cols-2" permet d'y ins√©rer 2 colonnes,
// puis "row-cols-lg-3" permet de redimensionner lorsque que l'on d√©passe le Breakpoint "lg" soit lorsque la taille est >= √† 992px. 

// la class="col p-3" ajoute un padding
//la class="w-100" permet de dimensionner l'image en Width 100% du container

<div class="container">
            <div class="row row-cols-2 row-cols-lg-3"> 
                <div class="col p-3">
                    <div class="image-card text-white">
                        <img class="w-100 rounded" src="../images/seafood.jpg" alt="plat de poisson frais">
                        <p class="titre-image"> Titre image 1</p>
                    </div>
                </div>

// pour dimensionner toutes les images √† la m√™me taille, il a fallu jouer 
sur les propri√©t√©s du container "image-card" et "image-card img" :

.image-card {
    height: auto; /* Permet l‚Äôadaptation fluide */
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    overflow: hidden;
}

.image-card img {
    width: 100%; /* Garde la largeur pleine */
    aspect-ratio: 16 / 9; /* Garde un ratio paysage */
    object-fit: cover; /* Coupe l‚Äôimage pour remplir l‚Äôespace */
}

// Ajout des boutons Edit et Suppression d'images pour le mode Administrateur
- ajout des boutons dans des DIV =

                        <div class="action-image-buttons">
                          üëâ  <button type="button" class="btn btn-outline-light"><i class="bi bi-pencil-square"></i></button>
                           üëâ <button type="button" class="btn btn-outline-light"><i class="bi bi-trash"></i></button>

- ajout de style dans .image-card(qui est le container) pour g√©rer la transparence, +l'alignement (display:flex + justify-content: space-between) =

.image-card{
    position:relative;
    &:hover{
        .titre-image,
        .action-image-buttons{            // üëâici on rajoute la class ".actions-image-buttons" pour le hover

    .action-image-buttons{                // üëâplus bas dans le main.scss, on ajoute le style des boutons
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        padding: 5px;
        display: flex;
        justify-content: space-between;
        opacity: 0;
        transition: all 0.3s;

// Ajout Modal (√©dition photo)
1/ on ajout des proprit√©s Bootstrap √† notre bouton d√©j√† cr√©√©: "Ajouter une photo" =
data-bs-toggle="modal" data-bs-target=#editionPhotoModal
2/ ajout des propri√©t√©s Bootstrap aux boutons Trash et Pencil =

        <button type="button" class="btn btn-outline-light" üëâdata-bs-toggle="modal" üëâdata-bs-target="#editionPhotoModal"><i class="bi bi-pencil-square"></i></button>
        <button type="button" class="btn btn-outline-light" üëâdata-bs-toggle="modal" üëâdata-bs-target="#deletePhotoModal"><i class="bi bi-trash"></i></button>

3/ Cr√©ation des modals Edition et Suppression =

voir Galerie.hmtl =
<!-- Modal edition -->
<!-- Modal suppression -->



#CARTE (carte.html)
Cr√©ation de la page Carte

‚ö†Ô∏è A CHAQUE AJOUT DE PAGE, il faut d√©finir le chemin dans AllRoutes.js :
    new Route("/carte", "La Carte", "pages/carte.html"),

1- ajout du BigTitle
2- ajout des sectionsCarte (Entrees Plats Desserts)
3- ajout du texte en Liste

#CONNEXION (signin.html)

Cr√©ation de la page connexion avec l'utilisation d'un formulaire Bootstrap (r√©cup√©rer en ligne),
 puis modification de la page pour correspondre √† nos besoins :

//extrait code bootstrap original (avant modification)//
<form>
  <div class="mb-3">
    <label for="exampleInputEmail1" class="form-label">Email address</label>
    <input type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp">
    <div id="emailHelp" class="form-text">We'll never share your email with anyone else.</div>
  </div>
  <div class="mb-3">
    <label for="exampleInputPassword1" class="form-label">Password</label>
    <input type="password" class="form-control" id="exampleInputPassword1">
  </div>
  <div class="mb-3 form-check">
    <input type="checkbox" class="form-check-input" id="exampleCheck1">
    <label class="form-check-label" for="exampleCheck1">Check me out</label>
  </div>
  <button type="submit" class="btn btn-primary">Submit</button>
</form>

//

#INSCRIPTION (signup.html)

Cr√©ation de la page "inscription", en dupliquant la page Connexion et en rajoutant des √©lements au formulaire 
(Nom / Prenom / Validez votre mot de passe)

#MON COMPTE (account.html)

Cr√©ation de la page "mon compte" en dupliquant la page Inscription et en rajoutant des √©lements au formulaire 
(Allergies / Nb Convives / Modifier vos informations)
+ ajout des bouton valider et supprimer mon compte
+ lien vers une nouvelle page :

#CHANGEMENT DE MOT DE PASSE (editPassword.html)

Permet √† l'utilisateur de changer son mot de passe
+ un bouton pour revenir sur son compte

#RESERVATIONS (reservations/allresa.html)
Cr√©ation de la page "Vos r√©servations" dans un nouveau dossier "Reservations"
On y indique en liste les anciennes r√©servations du client, en y mentionnant dans un lien: Date / Heure / Nb Personnes / Allergies